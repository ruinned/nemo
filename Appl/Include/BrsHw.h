
/**********************************************************************************************************************
  COPYRIGHT
-----------------------------------------------------------------------------------------------------------------------
  \par      copyright
  \verbatim
  Copyright (c) 2018 by Vector Informatik GmbH.                                                  All rights reserved.

                This software is copyright protected and proprietary to Vector Informatik GmbH.
                Vector Informatik GmbH grants to you only those rights as set out in the license conditions.
                All other rights remain with Vector Informatik GmbH.
  \endverbatim
-----------------------------------------------------------------------------------------------------------------------
  FILE DESCRIPTION
-----------------------------------------------------------------------------------------------------------------------
  \file  File:  BrsHw.h
      Project:  Vector Basic Runtime System
       Module:  BrsHw for platform Freescale/ST Mpc57xx

  \brief Description:  This is the hardware specific header file for Vector Basic Runtime System (BRS).
                       This file supports: see BrsHw_DerivativeList.h

  \attention Please note:
    The demo and example programs only show special aspects of the software. With regard to the fact
    that these programs are meant for demonstration purposes only, Vector Informatik liability shall be
    expressly excluded in cases of ordinary negligence, to the extent admissible by law or statute.
**********************************************************************************************************************/

#ifndef _BRSHW_H_
#define _BRSHW_H_

/**********************************************************************************************************************
  INCLUDES
**********************************************************************************************************************/
/*
 * Description: The BrsHw_DerivativeList header contains all derivative specific settings.
 *              This file is part of the BrsHw.
 */
#include "BrsHw_DerivativeList.h"

/*
 * Description: The BrsCfg header is used to configure different types of
 *              tests and system setups. Therefore it must be included first
 *              in each BRS and test module.
 *              This file is part of the BRS.
 */
#include "BrsCfg.h"

#if !defined (BASIC_RUNTIME_SYSTEM_TYPE_MSR4)
  /*
   * Description: The v_cfg header is generated by the generation tool. It contains
   *              a list of currently used CANbedded/MSR3 modules (VGEN_ENABLE_*).
   *              For MSR4, this list is contained within VGenEnableSwitches.h of
   *              zBrs_AsrEmbeddedRunTimeSystemCfg5, included via BrsCfg.h.
   */
  #include "v_cfg.h"

  /*
   * Description: BrsTypes header is the abstraction for MSR/CBD to get access to type definitions
   */
  #include "BrsTypes.h"
#else
  /*
   * Description: Std_Types header provides all Standard Types within ASR-stacks
   */
  #include "Std_Types.h"
#endif /*BASIC_RUNTIME_SYSTEM_TYPE_MSR4*/

/**********************************************************************************************************************
  MODULE VERSION
**********************************************************************************************************************/
/*
 * Description: The version numbers are BCD coded.
 *              E.g. a main version of 1.23 is coded with 0x0123, a bug fix version of 9 is coded 0x09.
 */

/* This is the BrsHw template main and bug fix version, the platform BrsHw is reviewed to */
#define BRSHW_SOURCECODE_TEMPLATE_VERSION        0x0202u
#define BRSHW_SOURCECODE_TEMPLATE_BUGFIX_VERSION 0x01u

/* This is the BrsHw main and bug fix version */
#define BRSHW_VERSION        0x0105u
#define BRSHW_BUGFIX_VERSION 0x01u

/**********************************************************************************************************************
  GLOBAL CONSTANT MACROS
**********************************************************************************************************************/
/*
 * Description: Macro for access to IO addresses
 */
#define BRSHW_IOS(type, address) (*((volatile type *)(address)))

/**********************************************************************************************************************
  COMPILER ABSTRACTION
**********************************************************************************************************************/
#if defined (BRS_COMP_DIAB)
  #define ___asm(c)               __asm_(c)
  #define __asm_(c)               asm(" " #c);
  #define __as1(c, d)             __as1_(c, d)
  #define __as1_(c, d)            asm(" " #c " , " #d);
  #define __as2(c, d, e)          __as2_(c, d, e)
  #define __as2_(c, d, e)         asm(" " #c " , " #d " , " #e);
  #define __as4(c, d, e, f, g)    __as4_(c, d, e, f, g)
  #define __as4_(c, d, e, f, g)   asm(" " #c " , " #d " , " #e " , " #f " , " #g);
  #define SET_SECTION(x)          TBD
# if defined BRSHW_ENABLE_ISR_SW_DISPATCHING
  #define BRS_DUMMY_ISR_ID(intno) BrsHwDummyInterrupt##intno
  #define BRS_DUMMY_ISR_ALIGNMENT 
  #define BRS_CORE_VECTOR_ALIGNMENT 4
  #define PREASM(text)            text,
  #define JUMPASM                 
# else
  #define BRS_DUMMY_ISR_ID(intno) ___asm( e_b BrsHwDummyInterrupt##intno)
  #define BRS_DUMMY_ISR_ALIGNMENT ___asm( .alignn INTERRUPT_ALIGNMENT)
  #define PREASM(text)            ___asm(text)
  #define JUMPASM                 e_b
# endif

#endif /*BRS_COMP_x*/

/******************************************************************************
 * Assembler command redefinition (BookE is using different names)
 ******************************************************************************/
#if defined (BRSHW_INSTRUCTION_SET_VLE)
  /*asm code is written in VLE*/

#else
  /* if VLE instruction set is not used code will be replaced by the 'book E' instruction set code */
  #define e_add16i addi
  #define e_ori    ori
  #define e_lwz    lwz
  #define se_blr   blr
  #define e_bl     bl
  #define e_b      b
  #define e_stw    stw
  #define e_lis    lis
  #define e_li     li
  #define se_rfi   rfi
  #define e_stwu   stwu
  #define se_mtctr mtctr
  #define e_beq    beq
  #define e_bdnz   bdnz
  #define e_stmw   stmw
  #define e_slwi   slwi
  #define e_addi   addi
  #define e_subi   subi
  #define e_lwzu   lwzu
#endif /*else BRSHW_INSTRUCTION_SET_VLE*/

 /*
 * Description: Compilers often have problems with comments within Assembly-Code.
 *              This solution was tested for GHS and Diab.
 */
  #define ASM_COMMENT()

/**********************************************************************************************************************
  BrsHW configuration
**********************************************************************************************************************/
#if defined (BRS_OS_USECASE_OSGEN7)
/* nothing to be done here yet */

#else
# if !defined (BRS_ENABLE_FBL_SUPPORT)
  #error "Configured OS_USECASE is not supported (Organi filtered because of ALM attributes or wrong set within Makefile.config)"
# endif
#endif

/**********************************************************************************************************************
  Global variables
**********************************************************************************************************************/

/**********************************************************************************************************************
  Global const variables
**********************************************************************************************************************/
/*
 * Description: These constants are used to propagate the Versions over module boundaries.
 *              The version numbers are BCD coded. E.g. a sub version of 23 is coded with 0x23, 
 *              a bug fix version of 9 is coded 0x09.
 */
extern uint8 const kBrsHwMainVersion;
extern uint8 const kBrsHwSubVersion;
extern uint8 const kBrsHwBugfixVersion;

/**********************************************************************************************************************
  Global function prototypes
**********************************************************************************************************************/

/*****************************************************************************/
/**
 * @brief      This function has to be used to initialize the Watchdog.
 * @pre        -
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from main@BrsMain or EcuM at power on initialization
 */
/*****************************************************************************/
void BrsHwWatchdogInitPowerOn(void);

/*****************************************************************************/
/**
 * @brief      This function has to be used to initialize the PLL.
 * @pre        -
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from main@BrsMain or EcuM at power on initialization
 */
/*****************************************************************************/
void BrsHwPllInitPowerOn(void);

/*****************************************************************************/
/**
 * @brief      This function has to be used to switch CPU and peripheral into RUN0 mode.
 * @pre        -
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Called by BrsHwHardwareInitPowerOn or EcuM at power on initialization
 */
/*****************************************************************************/
void BrsHwSwitchRunMode(void);

#if !defined (VGEN_ENABLE_DRVPORT)
# if defined (BRS_ENABLE_TCM_SUPPORT)
/*************************************
 TCM Functions
**************************************/
void BrsHw_WriteDio_TCM_CLK_OUT(uint8 Level);
void BrsHw_WriteDio_TCM_SDA_OUT(uint8 Level);
uint8 BrsHw_ReadDio_TCM_CLK_IN(void);
uint8 BrsHw_ReadDio_TCM_SDA_IN(void);
# endif /*BRS_ENABLE_TCM_SUPPORT*/
#endif /*!VGEN_ENABLE_DRVPORT*/

/*****************************************************************************/
/**
 * @brief      This function has to be used to initialize the used ports.
 * @pre        -
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from main@BrsMain or EcuM at power on initialization
 */
/*****************************************************************************/
void BrsHwPortInitPowerOn(void);

/* Wrapper from old BrsHwEvaBoardInitPowerOn() function to nothing. Done within BrsHwPortInitPowerOn() now. */
#define BrsHwEvaBoardInitPowerOn()

/*****************************************************************************/
/**
 * @brief      Disable the global system interrupt and initialize the INT
 *             lock handler variables.
 * @pre        Must be the first function call in main@BrsMain
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from main@BrsMain at power on initialization
 */
/*****************************************************************************/
void BrsHwDisableInterruptAtPowerOn(void);

/*****************************************************************************/
/**
 * @brief      Enable the global system interrupt the first time
 * @pre        Must be called after all initializations are done
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from main@BrsMain at power on initialization
 */
/*****************************************************************************/
void BrsHwEnableInterruptAtPowerOn(void);

/*****************************************************************************/
/**
 * @brief      Disables the global interrupt of the micro. This is done in a
 *             "save way" to allow also nested calls of BrsHwDisableInterrupt
 *             and BrsHwRestoreInterrupt. The first call of BrsHwDisableInterrupt
 *             stores the current state of the global INT flag and the last
 *             call to BrsHwRestoreInterrupt restores the state.
 * @pre        -
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from all modules to disable the global interrupt
 */
/*****************************************************************************/
void BrsHwDisableInterrupt(void);

/*****************************************************************************/
/**
 * @brief      Restores the state of the global interrupt of the micro. This
 *             is done in a "save way" to allow also nested calls of
 *             BrsHwDisableInterrupt and BrsHwRestoreInterrupt. The first call
 *             of BrsHwDisableInterrupt stores the current state of the global
 *             INT flag and the last call to BrsHwRestoreInterrupt restores the
 *             state.
 * @pre        -
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from all modules to enable the global interrupt
 */
/*****************************************************************************/
void BrsHwRestoreInterrupt(void);

/*****************************************************************************/
/**
 * @brief      restart ECU (issue a software reset or jump to startup code)
 * @pre        -
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from e.g. ECU state handling
 */
/*****************************************************************************/
void BrsHwSoftwareResetECU(void);

#if defined (BRS_ENABLE_SUPPORT_LEDS)          || \
    defined (BRS_ENABLE_SUPPORT_TOGGLE_WD_PIN) || \
    defined (BRS_ENABLE_SUPPORT_TOGGLE_CUSTOM_PIN)
typedef enum
{
  BRSHW_TOGGLEPIN_LED,
  BRSHW_TOGGLEPIN_WD,
  BRSHW_TOGGLEPIN_CUSTOM
}brsHw_TogglePin;

# if defined (BRS_ENABLE_SUPPORT_LEDS)
  /* Wrapper for old call of BrsHwSetLed() with parameter BRSHW_LED_SYSTEM_OK */
  #define BRSHW_LED_SYSTEM_OK 0 /* this is just a dummy on this platform, not used within BrsHwSetLed() */
  /* Wrapper from old BrsHwSetLed() function to new BrsHwTogglePin mechanism */
  #define BrsHwSetLed(x,y) BrsHwTogglePin(BRSHW_TOGGLEPIN_LED)
# endif /*BRS_ENABLE_SUPPORT_LEDS*/

# if defined (BRS_ENABLE_FBL_SUPPORT)
  #define BRS_START_SEC_RAM_CODE
  #include "Brs_MemMap.h"   /* PRQA S 5087 *//* MD_MSR_19.1 */
# endif
/*****************************************************************************/
/**
 * @brief      This API is used to toggle a PortPin.
 *             Per default, the following parameters are available:
 *               BRSHW_TOGGLEPIN_LED
 *               BRSHW_TOGGLEPIN_WD
 *               BRSHW_TOGGLEPIN_CUSTOM
 *             Depending pins have to be configured within BrsHw_Ports.h.
 * @pre        -
 * @param[in]  Pin has to configure the depending pin to be toggled
 * @param[out] -
 * @return     -
 * @context    Function is called from all modules to set or clear a PortPin
 */
/*****************************************************************************/
void BrsHwTogglePin(brsHw_TogglePin Pin);

# if defined (BRS_ENABLE_FBL_SUPPORT)
  #define BRS_STOP_SEC_RAM_CODE
  #include "Brs_MemMap.h"   /* PRQA S 5087 *//* MD_MSR_19.1 */
# endif
#endif /*BRS_ENABLE_SUPPORT_LEDS||BRS_ENABLE_SUPPORT_TOGGLE_WD_PIN||BRS_ENABLE_SUPPORT_TOGGLE_CUSTOM_PIN*/

/*****************************************************************************/
/**
 * @brief      This API is used for the BRS time measurement support to get a
 *             default time value for all measurements with this platform to
 *             be able to compare time measurements on different dates based
 *             on this time result.
 * @pre        -
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from TimeMeasurement
 */
/*****************************************************************************/
void BrsHwTime100NOP(void);

# if defined (BRSASR_ENABLE_SAFECTXSUPPORT)
/*****************************************************************************/
/**
 * @brief      This API is used to enable hardware access in untrusted mode
 * @pre        -
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from BrsAsrInitBsw
 */
/*****************************************************************************/
void BrsHw_EnableHwAccess(void);
# endif /*BRSASR_ENABLE_SAFECTXSUPPORT*/

/**********************************************************************************************************************
  Interrupt handler function protoytpes
**********************************************************************************************************************/

#if defined (BRSHW_ENABLE_INIT_RAM)
/*******************************************************************************
* NAME          : BrsHwInitRam
* CALLED BY     : main() before any other initialization
* PRECONDITIONS : Functions (and ISRs) that might require initialized global variables must not be executed before this function is done.
* PARAMETERS    : none
* RETURN VALUE  : none
* DESCRIPTION   : Copys data for initialized variables from ROM to RAM
********************************************************************************/
void BrsHwInitRam(void);
#endif

#endif /*_BRSHW_H_*/
